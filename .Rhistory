2+2
sqrt(5)
sqrt(25)
pl
pi
vector<-C(1,2,3,4,5)
vector<-c(1,2,3,4,5)
vector
caracteres<-c(Hola,a,todos,ustedes)
caracteres<-c(hola,a,todos,ustedes)
caracteres<-c(padrito,juanito,panchito)
caracteres<-c("pedrito","juanito","panchito")
caracteres
perso<-c(60,72,57,98,95,72)
alturaz-c(1.75,1.80,1.65,1.90,1.74,1.91)
altura<-c(1.75,1.80,1.65,1.90,1.74,1.91)
imc<-peso/altura^2
imc<-perso/altura^2
imc
sum(perso)
length(perso)
xbar<-sum(perso)/length(perso)
varianza<-sum((perso-xbar)^2)/(length(perso)-1)
varianza
desv.std<-sqrt(varianza)
desv.std
getwd
getwd()
setwd("D:\AUDEP")
setwd("../D:/AUDEP")
help.start()
help("mean")
help.search("mean")
d
log(1+sin(pi/4))
rnorm(8)
x<-5
esto.es.una.variable1<-45
esto.es.una.2a.variable2<-34
una.variable<-4
una.Variable<-10
una.Variable
una.variable
xNum<-c(1, 3.14159, 5, 7)
xNum
xLog<-c(TRUE, FALSE, TRUE, TRUE)
xChar<-c("foo", "bar", "boo", "far")
xChar
xlog
xLog
xMix<-c(1, TRUE, 3, "Hello, wold!")
xMix
peso<-c(60, 72, 84, 65, 43, 87, 90, 56)
peso
length(peso)
peso[4]
altura<-c(1.59, 1.75, 1.85, 1.60, 1.57, 1.90, 1.83, 1.73)
length altura
lenght(altura)
length(altura)
imc<-peso/altura^2
imc
sum(peso)
sum(altura)
sum(peso)/length(peso)
peso.barra <- sum(peso)/length(peso)
sum((peso-peso.barra)^2)/length(peso)
peso(mean)
mean(peso)
var(peso)
x <- NA
x+1
y <- c(x, 3, 5, x)
mean(y)
mean(y, na.rm=TRUE)
sqrt(25)
sqrt(-7)
sqrt(-17)
sqrt(-17+0i)
x <- 5/0
exp(-x)
exp(x)-exp(x)
-1:1/0
1/Inf
# matriz x
x <- c(1:6)
dim(x) <- c(2,3)
dimnames(x) <- list(c("Fila1","Fila2"), c("Col1", "Col2", "Col3"))
View(x)
x
#matriz ejema
ejema <- matrix(1:12, ncol=3, byrow=T, dimnames=list(letters[1:4], LETTERS[1:3]))
ejema
#matriz chemicals
chemicals <- matrix(1:24, ncol=4, dimnames=list(letters[1:4], letters[1:6]))
chemicals <- matrix(1:24, ncol=4, dimnames=list(letters[1:4], LETTERS(1:6)))
chemicals <- matrix(1:24, ncol=4, dimnames=list(letters[1:4], LETTERS[1:6]))
#matriz ejema2
ejema2 <- matrix(1:12, ncol=3, dimnames=list(letters[1:4], LETTERS[1:3]))
ejema2
#matriz chemicals
chemicals <- matrix(1:24, ncol=4, dinames=list(letters[1:6], LETTERS[1:4]))
chemicals <- matrix(1:24, ncol=4, diMnames=list(letters[1:6], LETTERS[1:4]))
chemicals <- matrix(1:24, ncol=4, dimnames=list(letters[1:6], LETTERS[1:4]))
chemicals
#matriz Moco
Moco <- matrix(1:24, ncol=12, dimnames=list(letters[1:2], letters[1:12]))
Moco
ejema[1,1]
ejema
ejema[, c(2, 3)]
ejema[1, 1]
ejema[, c(-1,-3), drop=F]
ejema[, c(-1,-3)]
sel <- matrix(rep(c(T,F), 6), 4, 3)
sel
ejema[sel]
help("rep")
t(chemicals)
chemicals
diag(chemicals)
col(chemicals)
row(chemiclas)
row(chemicals)
x <- matrix(1:6, 2, 3)
x
x[, 2]
x[, 2, drop=F]
x[2,]
x[2, drop=F]
x[1, 1:2]
x
y <- matrix(1:6, 3, 2)
y
y[3, ]
ncol(x)
x
nrow(y)
y
t(x)
cbind(1, x)
x
cbind(2, x)
cbind(x, 2)
cbind(1:3, 1:6)
diag(x)
apply(x, 1, sum)
x
apply(x ,1 , sum)
q = runif(10, 0, 20)
q
VectorBooleano <- (q<=14)
VectorBooleano <- (q>=14)
NumAprobados1 <- sum(VectorBooleano)
NumAprobados2 <- length(VectorBooleano[VectorBooleano=TRUE])
which(VectorBooleano)
Which(VectorBooleano)if (NumAprobados1>0){q[which(VectorBooleano)]}
if (NumAprobados1>0){q[which(VectorBooleano)]}
help("which")
VectorBooleano
NumAprobados1
NumAprobados2
help("runif")
help("logical")
q <- runif(1000000, 0, 20)
q
VectorBooleano <- (q>=14)
VectorBooleano
NumAprobados1 <- sum(VectorBooleano)
NumAprobados1
NumAprobados2 <- length(VectorBooleano[VectorBooleano=TRUE])
NumAprobados2
system.time(sum(VectorBooleano))
system.time(length(VectorBooleano[VectorBooleano=TRUE]))
help("system.time")
x <- c("que", "es", "VERDAD")
x
if("VERDAD" %in% x){print("Verdad se encontre en el IF")} else if ("VERDAD" %in% x) {print("VERDAD se encontro en el IF_ELSE")} else {print("No se encontró la VERDAD")}
x
x <- 1:10
type <- 'mean'
switch(type, mean=mean(x), median=median(x), sd=sd(x))
help("sd")
x <- c("a", "b", "c", "d")
seq_along(x)
for(i in seq_along(x)){print(x[i])}
help(rep())
help("rep")
help("rep")
help("norm")
X <- rnorm()
X <- rnorm(n = 25)
X
rep(x = X)
help("rep")
rep(1:5, 3)
r <- c("Hola", "Ricardo", "Feo")
r
rep(r, 4)
R <- rep(r, 4)
r
R
y <- rep(c("Tengo", "que", "apreder", "R"), each=3)
y
rep(c("Tengo", "que", "apreder", "R"), time(2, 2, 3, 4))
rep(c("Tengo", "que", "apreder", "R"), times =c(2, 2, 3, 4))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
r <- c("rep", "sirve", "para","repetir")
r
rep(r, 4) #
r <- c(1:7)
r
rep(r, 4) #
rep(1:7, 4)
rep(c("Hola", "a", "todos"), times=5)
rep(c("Hola", "a", "todos"), times=c(3,2,5))
source('~/.active-rstudio-document', encoding = 'UTF-8')
rep(1:7, length.out=15)
rep(1:7, length=15)
rep(c("Hola", "a", "todos", each=3))
rep(c("Hola", "a", "todos"), each=3)
rep(1:5, each=2, length=21)
source('C:/Users/Usuario/Desktop/Tareas/Tarea1/Tarea1.R')
1:20
seq(1,20)
seq(1,20,2)
seq(1,20, length.out=10)
source('C:/Users/Usuario/Desktop/Tareas/Tarea1/Tarea1.R')
B <- (1:50)
seq(1,20, along.with = B)
seq(1,20, length.out = 50)
seq(1, by=7, length.out=17)
a <- c(1, 3, 2)
b <- c(2, 8, 9)
a+b
a*b
sum(a*b)
sqrt(sum(a*a))
sqrt(sum(b*b))
help("rep")
rep(0,5)
a <- c(1, 3, 2)
b <- c(2, 8, 9)
# Suma de vectores
a+b
t(a)
View(t(a))
View(a)
a
a
b
View(a)
View(b)
t(a)
View(t(a))
a
7*a
sum(a*b)
v1 <- c(1,1)
v2 <- c(-1,1)
v1*v2
sum(v1*v2)
sum(v2*v2)
sum(v2*v1)
sum(a*b) #El resultado es un escalar.
sum(b*a)
A <- matrix(c(1,3,2,2,8,9), ncol=3)
A
A2 <- matrix(c(1,3,2,2,8,9), ncol=3, byrow=T)
A2
t(A)
B <- matrix(c(5,8,3,4,2,7), ncol=3, byrow=T)
B <- matrix(c(5,8,3,4,2,7), ncol=3, byrow=T)
A+B
A%*%a
A*a
A
a
A*a
M1 <- matrix(c(1,3,2,2,8,9), ncol=2)
M2 <- matrix(c(5,8,4,2), ncol=2)
M1%*%M2
diag(c(1,2,3))
diag(1,3)
diag(diag(c(1,2,3)))
A
diag(A)
R1 <- matrix(c(1,3,2,4),ncol=2, byrow=T)
R1
R2 <- solve(R1)
R2
R1%*%R2
R2%*%R1
A <- matrix(c(1,2,3,4), ncol=2)
b <- c(7,10)
x <- solve(A)%*%b
x
B1 <- matrix(c(1,-1,2-1), ncol=2, byrow=T)
b1 <- c(2,3)
X <- solve(B1)%*%b1
B1 <- matrix(c(1,-1,2,-1), ncol=2, byrow=T)
b1 <- c(2,3)
X <- solve(B1)%*%b1
X
B1 <- matrix(c(1,-1,-1,2), ncol=2, byrow=T)
b1 <- c(2,3)
X <- solve(B1)%*%b1
X
View(X)
View(B)
rm(list=ls())
rm(list=ls())
x1 <- c(2,4,5,8,1,12,23,34)
class(x1)
mat1 <- matrix(data =1:9, nrow=3, ncol=3)
mat2 <- matrix(data=1:9, ncol=3)
mat1
mat2
mat3 <- matrix(data=1:9, nrow=3)
mat3
mat3 <- matrix(data=1:15, nrow=5, byrow= TRUE,
dimnames=list(c("r1", "r2","r3","r4","r5"), c("c1","c2","c3")))
mat3
class(mat3)
dim(mat3)
Dimensiones <- dim(mat3)
Dimensiones
Dimensiones[1]
Dimensiones[2]
colnames(mat3)
rownames(mat3)
help("sample")
mat4 <- matrix(data=sample(1:129,9), ncol=3)
mat4
mat4[2,2] #
mat4[,3]
mat4[3,]
mat4[2,2] <- pi
mat4
-1:1/0 #NaN es no a number
x <- NA
x
rm(list=ls())
x <- runif(1, 0, 10)
x
help("runif")
r <- runif(10,0,10)
r
x <- runif(1, 0, 10)
if(x>5){
y <- TRUE
}else{
y <- FALSE
}
x
x <- runif(1, 0, 10)
if(x<5){
y <- TRUE
}else{
y <- FALSE
}
x
help("print")
for(i in 1:5){
print(i)
}
i
i
sessionInfo()
getwd()
setwd("C:/Users/Usuario/Desktop/Clases_de_R/Prácticas")
getwd()
peso <- c(60,72,84,65,43,87,90,56)
peso
length(peso)
peso[3]
altura <- c(1.59,1.75,1.85,1.60,1.57,1.90,1.83,1.73)
altura
length(altura)
imc <- peso/altura^2
imc
altura2 <- c(1.59,1.75,1.85,1.60,1.57,1.90,1.83,1.73,1.85)
altura2
IMC <- peso/altura2
IMC
peso[1]
length(IMC)
60/(1.85)^2
IMC[9]
length(peso)
lenngth(altura2)
length(peso)
length(altura2)
peso[1]
altura[9]
altura2[9]
60/(1.85)^2
IMC[9]
peso[8]
56/(1.85)^2
IMC[9]
peso
peso[1]
altura2[9]
60/(1.85)^2
IMC[9]
x <- NA
x+1
y <- c(x,3,5,x)
mean(y)
mean(y, na.rm = T)# con rm.na=T se omite los NA
